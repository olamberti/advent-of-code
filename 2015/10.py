import numpy as np

# Theory desribed under https://www.njohnston.ca/2010/10/a-derivation-of-conways-degree-71-look-and-say-polynomial/
# The cosmological theorem table is generated here based on the information founded on the link:
cosmos =   [[0, '1112', 4, [62]], [1, '1112133', 7, [63, 61]], [2, '111213322112', 12, [64]], [3, '111213322113', 12, [65]],
            [4, '1113', 4, [67]], [5, '11131', 5, [68]], [6, '111311222112', 12, [83, 54]], [7, '111312', 6, [69]], [8, '11131221', 8, [70]],
            [9, '1113122112', 10, [75]], [10, '1113122113', 10, [76]], [11, '11131221131112', 14, [81]], [12, '111312211312', 12, [77]],
            [13, '11131221131211', 14, [78]], [14, '111312211312113211', 18, [79]], [15, '111312211312113221133211322112211213322112', 42, [80, 28, 90]],
            [16, '111312211312113221133211322112211213322113', 42, [80, 28, 89]], [17, '11131221131211322113322112', 26, [80, 29]],
            [18, '11131221133112', 14, [74, 28, 91]], [19, '1113122113322113111221131221', 28, [74, 31]],[20, '11131221222112', 14, [71]],
            [21, '111312212221121123222112', 24, [72]], [22, '111312212221121123222113', 24, [73]], [23, '11132', 5, [82]], [24, '1113222', 7, [85]],
            [25, '1113222112', 10, [86]], [26, '1113222113', 10, [87]], [27, '11133112', 8, [88, 91]], [28, '12', 2, [0]], [29, '123222112', 9, [2]],
            [30, '123222113', 9, [3]], [31, '12322211331222113112211', 23, [1, 60, 28, 84]], [32, '13', 2, [4]], [33, '131112', 6, [27]],
            [34, '13112221133211322112211213322112', 32, [23, 32, 60, 28, 90]], [35, '13112221133211322112211213322113', 32, [23, 32, 60, 28, 89]],
            [36, '13122112', 8, [6]], [37, '132', 3, [7]], [38, '13211', 5, [8]], [39, '132112', 6, [9]], [40, '1321122112', 10, [20]],
            [41, '132112211213322112', 18, [21]], [42, '132112211213322113', 18, [22]], [43, '132113', 6, [10]], [44, '1321131112', 10, [18]],
            [45, '13211312', 8, [11]], [46, '1321132', 7, [12]], [47, '13211321', 8, [13]], [48, '132113212221', 12, [14]],
            [49, '13211321222113222112', 20, [17]], [50, '1321132122211322212221121123222112', 34, [15]], [51, '1321132122211322212221121123222113', 34, [16]],
            [52, '13211322211312113211', 20, [19]], [53, '1321133112', 10, [5, 60, 28, 91]], [54, '1322112', 7, [25]], [55, '1322113', 7, [26]],
            [56, '13221133112', 11, [24, 28, 91]], [57, '1322113312211', 13, [24, 28, 66]], [58, '132211331222113112211', 21, [24, 28, 84]],
            [59, '13221133122211332', 17, [24, 28, 67, 60, 28, 88]], [60, '22', 2, [60]], [61, '3', 1, [32]], [62, '3112', 4, [39]], [63, '3112112', 7, [40]],
            [64, '31121123222112', 14, [41]], [65, '31121123222113', 14, [42]], [66, '3112221', 7, [37, 38]], [67, '3113', 4, [43]], [68, '311311', 6, [47]],
            [69, '31131112', 8, [53]], [70, '3113112211', 10, [48]], [71, '3113112211322112', 16, [49]], [72, '3113112211322112211213322112', 28, [50]],
            [73, '3113112211322112211213322113', 28, [51]], [74, '311311222', 9, [46, 37]], [75, '311311222112', 12, [46, 54]], [76, '311311222113', 12, [46, 55]],
            [77, '3113112221131112', 16, [46, 56]], [78, '311311222113111221', 18, [46, 57]], [79, '311311222113111221131221', 24, [46, 58]],
            [80, '31131122211311122113222', 23, [46, 59]], [81, '3113112221133112', 16, [46, 32, 60, 28, 91]], [82, '311312', 6, [44]], [83, '31132', 5, [45]],
            [84, '311322113212221', 15, [52]], [85, '311332', 6, [37, 28, 88]], [86, '3113322112', 10, [37, 29]], [87, '3113322113', 10, [37, 30]],
            [88, '312', 3, [33]], [89, '312211322212221121123222113', 27, [35]], [90, '312211322212221121123222112', 27, [34]], [91, '32112', 5, [36]]]

# Generate transistion matrix
L, elements = len(cosmos), {}
T = np.zeros((L, L))
for id1, reaction in enumerate(cosmos):
    key, L1, elems = reaction[1], reaction[2], reaction[3]
    elements[key] = id1
    for id2 in elems:
        L2 = cosmos[id2][2]
        T[id2, id1] += L2 / L1

# Initial state
start, v = open('10.txt').read(), np.zeros(92)
if start in elements:
    id0 = elements[start]
    v[id0] = cosmos[id0][0]

T1 = np.linalg.matrix_power(T,40)
print(int((T1*v).sum()))

T2 = np.linalg.matrix_power(T,50)
print(int((T2*v).sum()))